---------------------------------------------------------------------------
chapter13 (circle)
---------------------------------------------------------------------------

---------------------------------------------------------------------------
1) Когда выполняется необязательная инструкция else  в цикле
---------------------------------------------------------------------------
Выполняется , если выход из цикла производится не инструкцией break
Используется, чтобы не использовать флаги в цикле(пример с простым числом)
Используется, если цкл ниразу не был выполнен

---------------------------------------------------------------------------
2) Как вывести значения словаря
---------------------------------------------------------------------------
D = {'a':1,'b':2,'c':3}

# c помощью метода items
for (key,value) in D.items():
    print(key,' => ',value)

# спомощью перебора ключей и индексирования
for key in D:
    print(key,'=>',D[key])

---------------------------------------------------------------------------
3) Что такое расширенная операция распаковывания?
---------------------------------------------------------------------------
Это когда переменой может быть присвоено сразу множество последовательностей
Пример  a, *b, c = (1,2,3,4)
Итог a = 1
     b = [2,3]
     c = 4
Эту операцию можно заменить извлечением среза
all = (1,2,3,4)
a, b, c = all[0], all[1:3], all[3]

Отличия
- первый вариант всегда возвращает список
- второй вариант возвращает результат зависящий  от исходной последовательности

---------------------------------------------------------------------------
3) Что можете рассказать за функцию range?
---------------------------------------------------------------------------
В Python 3.0 функция range возвращает итератор, который генерирует элементы по требованию
мы должны обернуть вызов этой функции в вызов функции list


---------------------------------------------------------------------------
4) Допустим есть список целочисленных значений!Как с помощью цикла for увеличить значения на 1
---------------------------------------------------------------------------
for x in L:
    x += 1
Данный способо не подойдет, так как мы меняем переменную x, но не список L!
на каждой итерации мы получаем новое значени для x, при это спиок не меняем

Вот правильный вариант с помзью функции range  и индексов
for i in range(len(L)):
    L[i] += 1
Мы тут именно меняем список с помощью индексирования

---------------------------------------------------------------------------
5) Что делает функция zip
---------------------------------------------------------------------------
range позволяет выполнять обход последовательностей или отдельных частей последовательностей
zip позволяет использовать цикл for для обхода нескольких последовательностей параллельно

L1 = [1,2,3,4]
L2 = [5,6,7,8]

list(zip(L1,L2))
Результат [(1, 5), (2, 6), (3, 7), (4, 8)]

Усекает результат по длине кратчайшей последовательности, в отличии от map(), оторая дополняет значениями None(версия 2.*)

Также удобно создавать словари, если есть список ключей и отдельно значений
D2 = {}
for (k, v) in zip(keys, vals): D2[k] = v

или D3 = dict(zip(keys, vals))

---------------------------------------------------------------------------
6) Что делает функция map
---------------------------------------------------------------------------
Обычно функция map применяют, когда есть функция и к кажому элементу последовательности надо ее применить
Пример list(map(ord, ‘spam’))